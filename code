import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# Load training and testing datasets
train_df = pd.read_csv('/content/updated_cleaned_merged_data_train.csv')
test_df = pd.read_csv('/content/updated_cleaned_merged_data_test.csv')

# Drop rows with any missing values
train_df = train_df.dropna()
test_df = test_df.dropna()

# Function to remove outliers using IQR
def remove_outliers(df, columns, threshold=1.5):
    for col in columns:
        Q1 = df[col].quantile(0.25)  # First quartile (25%)
        Q3 = df[col].quantile(0.75)  # Third quartile (75%)
        IQR = Q3 - Q1               # Interquartile range
        lower_bound = Q1 - threshold * IQR
        upper_bound = Q3 + threshold * IQR
        df = df[(df[col] >= lower_bound) & (df[col] <= upper_bound)]
    return df

# Remove outliers from the training data
train_df = remove_outliers(train_df, ['CFR', 'Population_Index', 'Healthcare_Workforce_per_1000', 'nearest_hotspot', 'Deaths_x'])

# Features and target selection
X_train = train_df[['CFR', 'Population_Index', 'Healthcare_Workforce_per_1000', 'nearest_hotspot']]
y_train = train_df['Deaths_x']

X_test = test_df[['CFR', 'Population_Index', 'Healthcare_Workforce_per_1000', 'nearest_hotspot']]
y_test = test_df['Deaths_x']

# Standardize the features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Define the Random Forest model
rf_model = RandomForestRegressor(
    n_estimators=200,       # Number of trees
    max_depth=10,           # Maximum depth of each tree
    min_samples_split=5,    # Minimum samples required to split an internal node
    min_samples_leaf=2,     # Minimum samples required to be at a leaf node
    random_state=42,        # Ensures reproducibility
    n_jobs=-1               # Use all CPU cores for parallel processing
)

# Train the model
rf_model.fit(X_train_scaled, y_train)

# Make predictions on the test set
y_pred = rf_model.predict(X_test_scaled)

# Evaluate the model
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = mse ** 0.5
r2 = r2_score(y_test, y_pred)

# Calculate accuracy as a percentage
def calculate_accuracy(y_true, y_pred):
    errors = abs(y_true - y_pred)
    accuracy = 100 - (errors.mean() / y_true.mean() * 100)
    return accuracy

accuracy = calculate_accuracy(y_test, y_pred)

# Print the evaluation metrics
print("Random Forest Model Evaluation:")
print(f"Mean Absolute Error (MAE): {mae}")
print(f"Mean Squared Error (MSE): {mse}")
print(f"Root Mean Squared Error (RMSE): {rmse}")
print(f"R-squared (R2): {r2}")
print(f"Accuracy: {accuracy:.2f}%")

# Save the predictions and actual values for comparison
output_file_path = 'random_forest_predictions_vs_actual.xlsx'
results = pd.DataFrame({
    'Actual': y_test,
    'Predicted': y_pred
})
results.to_excel('/content/RandomForest_Actual_vs_Pred.xlsx', index=False)

print(f"Predictions vs Actual values saved to: /content/RandomForest_Actual_vs_Pred.xlsx")
